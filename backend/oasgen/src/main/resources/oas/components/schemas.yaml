AnalyzeRequest:
  type: object
  required:
    - repoUrl
  properties:
    repoUrl:
      type: string
      format: uri
      description: Git repository URL that should be analyzed.

AnalyzeResponse:
  type: object
  required:
    - projectId
    - status
  properties:
    projectId:
      type: integer
      format: int64
      description: Identifier assigned to the analyzed project.
    status:
      type: string
      description: Current status of the analysis workflow.
      example: ANALYZED_METADATA

BuildInfo:
  type: object
  properties:
    groupId:
      type: string
      description: Maven group identifier resolved from the repository build metadata.
    artifactId:
      type: string
      description: Maven artifact identifier resolved from the repository build metadata.
    version:
      type: string
      description: Maven version resolved from the repository build metadata.
    javaVersion:
      type: string
      description: Java version targeted by the project build configuration.

ClassMetadataSummary:
  type: object
  required:
    - fullyQualifiedName
    - className
    - userCode
  properties:
    fullyQualifiedName:
      type: string
      description: Fully qualified class name.
    packageName:
      type: string
      description: Package that declares the class.
    className:
      type: string
      description: Simple class name without package information.
    stereotype:
      type: string
      description: Functional stereotype inferred from the class metadata.
    userCode:
      type: boolean
      description: Indicates whether the class originates from user authored code.
    sourceSet:
      type: string
      description: Source set where the class resides, such as MAIN or TEST.
    relativePath:
      type: string
      description: Path to the class relative to the repository root.
    annotations:
      type: array
      description: Fully qualified annotations present on the class.
      items:
        type: string
    interfacesImplemented:
      type: array
      description: Interfaces implemented by the class.
      items:
        type: string

MetadataDump:
  type: object
  properties:
    openApiSpecs:
      type: array
      description: Collection of OpenAPI specification files detected within the repository.
      items:
        $ref: '#/OpenApiSpec'
    wsdlDocuments:
      type: array
      description: Collection of WSDL documents discovered in the repository.
      items:
        $ref: '#/SpecDocument'
    xsdDocuments:
      type: array
      description: Collection of XSD schema artifacts related to SOAP services.
      items:
        $ref: '#/SpecDocument'
    soapServices:
      type: array
      description: Summary of SOAP services, ports, and operations extracted from WSDL files.
      items:
        $ref: '#/SoapServiceSummary'

OpenApiSpec:
  type: object
  required:
    - fileName
    - content
  properties:
    fileName:
      type: string
      description: Source file name for the OpenAPI specification.
    content:
      type: string
      description: Raw YAML or JSON content extracted from the specification file.

SpecDocument:
  type: object
  required:
    - fileName
    - content
  properties:
    fileName:
      type: string
      description: Source file name for the document.
    content:
      type: string
      description: Raw text content of the document.

SoapServiceSummary:
  type: object
  required:
    - fileName
    - serviceName
  properties:
    fileName:
      type: string
      description: WSDL document file name from which this summary was derived.
    serviceName:
      type: string
      description: Name of the SOAP service.
    ports:
      type: array
      description: Ports exposed by the SOAP service.
      items:
        $ref: '#/SoapPortSummary'

SoapPortSummary:
  type: object
  required:
    - portName
  properties:
    portName:
      type: string
      description: Name of the SOAP port.
    operations:
      type: array
      description: Operation names exposed by the port.
      items:
        type: string

ApiEndpoint:
  type: object
  required:
    - protocol
    - pathOrOperation
    - controllerClass
  properties:
    protocol:
      type: string
      description: Protocol classification of the endpoint (REST, SOAP, SERVLET, JAXRS).
    httpMethod:
      type: string
      description: HTTP method, when applicable.
    pathOrOperation:
      type: string
      description: Resolved path or operation identifier exposed by the endpoint.
    controllerClass:
      type: string
      description: Fully qualified class that declares the endpoint.
    controllerMethod:
      type: string
      description: Method handling the endpoint invocation.
    specArtifacts:
      type: array
      description: Related specification artifacts such as OpenAPI or WSDL documents.
      items:
        $ref: '#/ApiSpecArtifact'

ApiSpecArtifact:
  type: object
  required:
    - type
    - name
  properties:
    type:
      type: string
      description: Artifact type, e.g. OPENAPI, WSDL, XSD, SERVLET_MAPPING.
    name:
      type: string
      description: Human friendly label for the artifact.
    reference:
      type: string
      description: Identifier used to resolve the artifact content.

AssetInventory:
  type: object
  properties:
    images:
      type: array
      description: Image assets discovered in the repository.
      items:
        $ref: '#/ImageAsset'

ImageAsset:
  type: object
  required:
    - fileName
    - relativePath
  properties:
    fileName:
      type: string
      description: Image file name.
    relativePath:
      type: string
      description: Path to the asset relative to the repository root.
    sizeBytes:
      type: integer
      format: int64
      description: File size in bytes.
    sha256:
      type: string
      description: SHA-256 hash of the asset for integrity verification.

ParsedDataResponse:
  type: object
  required:
    - projectId
    - projectName
    - repoUrl
    - analyzedAt
  properties:
    projectId:
      type: integer
      format: int64
      description: Identifier of the associated project.
    projectName:
      type: string
      description: Name of the analyzed project.
    repoUrl:
      type: string
      format: uri
      description: Git repository URL that was analyzed.
    analyzedAt:
      type: string
      format: date-time
      description: Timestamp when the repository was last analyzed.
    buildInfo:
      $ref: '#/BuildInfo'
    classes:
      type: array
      description: Summaries for classes detected during analysis.
      items:
        $ref: '#/ClassMetadataSummary'
    metadataDump:
      $ref: '#/MetadataDump'
    dbAnalysis:
      $ref: '#/DbAnalysis'
    apiEndpoints:
      type: array
      description: Catalog of API endpoints discovered in the project.
      items:
        $ref: '#/ApiEndpoint'
    assets:
      $ref: '#/AssetInventory'

DbAnalysis:
  type: object
  properties:
    entities:
      type: array
      description: Summaries of JPA entities and their fields.
      items:
        $ref: '#/DbEntitySummary'
    classesByEntity:
      type: object
      description: Mapping of entity name to repository classes interacting with it.
      additionalProperties:
        type: array
        items:
          type: string
    operationsByClass:
      type: object
      description: Mapping of repository class to its detected CRUD operations.
      additionalProperties:
        type: array
        items:
          $ref: '#/DaoOperationDetails'

DbEntitySummary:
  type: object
  required:
    - entityName
  properties:
    entityName:
      type: string
      description: Simple name of the entity class.
    fullyQualifiedName:
      type: string
      description: Fully qualified class name of the entity.
    tableName:
      type: string
      description: Database table name mapped to the entity.
    primaryKeys:
      type: array
      description: Fields designated as primary keys.
      items:
        type: string
    fields:
      type: array
      description: Declared fields and their column mappings.
      items:
        $ref: '#/DbFieldSummary'
    relationships:
      type: array
      description: Entity relationships detected via JPA annotations.
      items:
        $ref: '#/DbRelationshipSummary'

DbFieldSummary:
  type: object
  required:
    - name
    - type
  properties:
    name:
      type: string
      description: Field name as declared in the entity.
    type:
      type: string
      description: Java type of the field.
    columnName:
      type: string
      description: Database column mapped to the field when provided.

DbRelationshipSummary:
  type: object
  required:
    - fieldName
    - relationshipType
  properties:
    fieldName:
      type: string
      description: Field participating in the relationship.
    targetType:
      type: string
      description: Target entity or collection element type.
    relationshipType:
      type: string
      description: Relationship classification such as ONE_TO_MANY.

DaoOperationDetails:
  type: object
  required:
    - methodName
    - operationType
  properties:
    methodName:
      type: string
      description: Repository method name.
    operationType:
      type: string
      description: Inferred CRUD intent (SELECT, INSERT, UPDATE, DELETE, etc.).
    target:
      type: string
      description: Entity or table targeted by the method.
    querySnippet:
      type: string
      description: Inline query text when available.

ProjectDbAnalysisResponse:
  type: object
  required:
    - projectId
    - dbAnalysis
  properties:
    projectId:
      type: integer
      format: int64
      description: Identifier of the associated project.
    dbAnalysis:
      $ref: '#/DbAnalysis'

ProjectApiEndpointsResponse:
  type: object
  required:
    - projectId
    - endpoints
  properties:
    projectId:
      type: integer
      format: int64
      description: Identifier of the associated project.
    endpoints:
      type: array
      description: Endpoint catalog for the project.
      items:
        $ref: '#/ApiEndpoint'
