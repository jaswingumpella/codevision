/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.codevision.codevisionbackend.api.generated;

import com.codevision.codevisionbackend.api.model.AnalyzeRequest;
import com.codevision.codevisionbackend.api.model.AnalyzeResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-27T02:19:03.945888-04:00[America/New_York]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Analysis", description = "Endpoints used to trigger repository analysis workflows.")
public interface AnalysisApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /analyze : Trigger analysis for a repository
     * Starts a background analysis workflow for the supplied repository URL.
     *
     * @param analyzeRequest  (required)
     * @return Analysis request accepted and the snapshot metadata has been persisted. (status code 200)
     *         or The request payload failed validation. (status code 400)
     *         or Missing or invalid API key. (status code 401)
     */
    @Operation(
        operationId = "analyzeRepository",
        summary = "Trigger analysis for a repository",
        description = "Starts a background analysis workflow for the supplied repository URL.",
        tags = { "Analysis" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Analysis request accepted and the snapshot metadata has been persisted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalyzeResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request payload failed validation."),
            @ApiResponse(responseCode = "401", description = "Missing or invalid API key.")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/analyze",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AnalyzeResponse> analyzeRepository(
        @Parameter(name = "AnalyzeRequest", description = "", required = true) @Valid @RequestBody AnalyzeRequest analyzeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"projectId\" : 0, \"status\" : \"ANALYZED_METADATA\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
